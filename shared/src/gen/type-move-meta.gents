/**
 * @fileoverview Description of this file.
 */

const {Movepool} = require('../../../functions/lib/shared/src/battle/movepool')
const {datastore} = require('../../../functions/lib/shared/src/pokemon')

const moves = Object.entries(Movepool)

console.log(`// This file is auto-generated by gen-type-movemeta.js
import { Type } from '../pokemon/types'

export const MoveTypeMap = {`)

moves.forEach(([moveId, move]) => {
    console.log(`   "${moveId}": { name: "${move.name}", type: '${move.type}' as Type, attackKey: '${move.attackKey}', power: ${move.power}, accuracy: ${move.accuracy}, flavor: "${move.flavor}" },`)
})
console.log('}')

console.log(`
export const SupportMoves: MoveId[] = [`)

moves.forEach(([moveId, move]) => {
    if (move.power !== 0) {
        return
    }
    console.log(`   "${moveId}",`)
})

console.log(']')

console.log(`export type MoveId = keyof typeof MoveTypeMap`)

const moveUsers = {}
for (const [k, v] of Object.entries(datastore)) {
    v.move.forEach(m => {
        if (moveUsers[m]) {
            moveUsers[m].push(k)
        } else {
            moveUsers[m] = [k]
        }
    })
    if (v.novelMoves) {
        // Skip var0
        for (let i = 1; i < v.novelMoves.length; i++) {
            v.novelMoves[i].forEach(m => {
                if (moveUsers[m]) {
                    moveUsers[m].push(`${k}-var${i}`)
                } else {
                    moveUsers[m] = [`${k}-var${i}`]
                }
            })
        }
    }
}

console.log(`export const MoveUsers = {`)

Object.entries(moveUsers).forEach(([moveId, users]) => {
    console.log(`   "${moveId}": [${users.map(u => `'${u}'`).join(',')}],`)
})
console.log('}')
